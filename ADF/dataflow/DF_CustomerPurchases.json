{
	"name": "DF_CustomerPurchases",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Storage_Gen2_OLTP_PurchaseOrder",
						"type": "DatasetReference"
					},
					"name": "PurcahseOrder"
				},
				{
					"dataset": {
						"referenceName": "DS_Storage_Gen2_OLTP_Customer",
						"type": "DatasetReference"
					},
					"name": "Customer"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Storage_Gen2_OLTP_Output",
						"type": "DatasetReference"
					},
					"name": "Output"
				}
			],
			"transformations": [
				{
					"name": "PurchaseOrderSelected"
				},
				{
					"name": "CustomerSelected"
				},
				{
					"name": "QualityChecks"
				},
				{
					"name": "JoinedStream"
				},
				{
					"name": "CustomerPurchases"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PurchaseOrderID as string,",
				"          CustomerCode as string,",
				"          ProductCode as string,",
				"          EmployeeCode as string,",
				"          PurchaseOrderDate as string,",
				"          Quantity as long,",
				"          UnitPrice as float",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> PurcahseOrder",
				"source(output(",
				"          CustomerCode as string,",
				"          CustomerName as string,",
				"          Address as string,",
				"          PhoneNumber as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Customer",
				"PurcahseOrder select(mapColumn(",
				"          CustomerCode,",
				"          Quantity",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> PurchaseOrderSelected",
				"Customer select(mapColumn(",
				"          CustomerCode,",
				"          CustomerName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CustomerSelected",
				"PurchaseOrderSelected filter(greater(Quantity, 0)) ~> QualityChecks",
				"QualityChecks, CustomerSelected join(PurchaseOrderSelected@CustomerCode == CustomerSelected@CustomerCode,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinedStream",
				"JoinedStream aggregate(groupBy(CustomerSelected@CustomerCode,",
				"          CustomerName),",
				"     Quantity = sum(Quantity)) ~> CustomerPurchases",
				"CustomerPurchases sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CustomerCode as string,",
				"          CustomerName as string,",
				"          Address as string,",
				"          PhoneNumber as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Output"
			]
		}
	}
}